package com.zimerick.zmrklibrary.zmrkdatasync;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.zimerick.zmrklibrary.zmrkdatasync.ZMRKCoreDataQueueObject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ZMRKCORE_DATA_QUEUE_OBJECT.
*/
public class ZMRKCoreDataQueueObjectDao extends AbstractDao<ZMRKCoreDataQueueObject, Long> {

    public static final String TABLENAME = "ZMRKCORE_DATA_QUEUE_OBJECT";

    /**
     * Properties of entity ZMRKCoreDataQueueObject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectID = new Property(0, Long.class, "objectID", true, "OBJECT_ID");
        public final static Property AppIndex = new Property(1, Integer.class, "appIndex", false, "APP_INDEX");
        public final static Property Data = new Property(2, String.class, "data", false, "DATA");
        public final static Property ModifiedIndex = new Property(3, Integer.class, "modifiedIndex", false, "MODIFIED_INDEX");
    };


    public ZMRKCoreDataQueueObjectDao(DaoConfig config) {
        super(config);
    }
    
    public ZMRKCoreDataQueueObjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ZMRKCORE_DATA_QUEUE_OBJECT' (" + //
                "'OBJECT_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: objectID
                "'APP_INDEX' INTEGER," + // 1: appIndex
                "'DATA' TEXT," + // 2: data
                "'MODIFIED_INDEX' INTEGER);"); // 3: modifiedIndex
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ZMRKCORE_DATA_QUEUE_OBJECT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ZMRKCoreDataQueueObject entity) {
        stmt.clearBindings();
 
        Long objectID = entity.getObjectID();
        if (objectID != null) {
            stmt.bindLong(1, objectID);
        }
 
        Integer appIndex = entity.getAppIndex();
        if (appIndex != null) {
            stmt.bindLong(2, appIndex);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(3, data);
        }
 
        Integer modifiedIndex = entity.getModifiedIndex();
        if (modifiedIndex != null) {
            stmt.bindLong(4, modifiedIndex);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ZMRKCoreDataQueueObject readEntity(Cursor cursor, int offset) {
        ZMRKCoreDataQueueObject entity = new ZMRKCoreDataQueueObject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // objectID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // appIndex
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // data
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // modifiedIndex
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ZMRKCoreDataQueueObject entity, int offset) {
        entity.setObjectID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppIndex(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setData(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModifiedIndex(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ZMRKCoreDataQueueObject entity, long rowId) {
        entity.setObjectID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ZMRKCoreDataQueueObject entity) {
        if(entity != null) {
            return entity.getObjectID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
