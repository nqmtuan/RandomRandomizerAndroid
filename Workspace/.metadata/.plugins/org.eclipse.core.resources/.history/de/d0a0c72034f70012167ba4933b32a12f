package com.nqmtuan.android.randomrandomizer;

import com.nqmtuan.android.randomrandomizer.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table RANDOM_ELEMENT.
 */
public class RandomElement implements java.io.Serializable {

    private Long id;
    private String name;
    private String imageName;
    private String drawableName;
    private Long collectionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RandomElementDao myDao;

    private RandomElementCollection collection;
    private Long collection__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public RandomElement() {
    }

    public RandomElement(Long id) {
        this.id = id;
    }

    public RandomElement(Long id, String name, String imageName, String drawableName, Long collectionId) {
        this.id = id;
        this.name = name;
        this.imageName = imageName;
        this.drawableName = drawableName;
        this.collectionId = collectionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRandomElementDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getImageName() {
        return imageName;
    }

    public void setImageName(String imageName) {
        this.imageName = imageName;
    }

    public String getDrawableName() {
        return drawableName;
    }

    public void setDrawableName(String drawableName) {
        this.drawableName = drawableName;
    }

    public Long getCollectionId() {
        return collectionId;
    }

    public void setCollectionId(Long collectionId) {
        this.collectionId = collectionId;
    }

    /** To-one relationship, resolved on first access. */
    public RandomElementCollection getCollection() {
        if (collection__resolvedKey == null || !collection__resolvedKey.equals(collectionId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RandomElementCollectionDao targetDao = daoSession.getRandomElementCollectionDao();
            collection = targetDao.load(collectionId);
            collection__resolvedKey = collectionId;
        }
        return collection;
    }

    public void setCollection(RandomElementCollection collection) {
        this.collection = collection;
        collectionId = collection == null ? null : collection.getId();
        collection__resolvedKey = collectionId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
