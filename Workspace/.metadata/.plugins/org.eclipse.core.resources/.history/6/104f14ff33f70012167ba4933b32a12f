package com.nqmtuan.android.randomrandomizer;

import java.util.List;
import com.nqmtuan.android.randomrandomizer.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.List;
import java.util.Random;
import java.util.ArrayList;
// KEEP INCLUDES END
/**
 * Entity mapped to table RANDOM_ELEMENT_COLLECTION.
 */
public class RandomElementCollection implements java.io.Serializable {

    private Long id;
    private String name;
    private int nSelection;
    private int shouldAllowRepeat;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RandomElementCollectionDao myDao;

    private List<RandomElement> listElements;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public RandomElementCollection() {
    }

    public RandomElementCollection(Long id) {
        this.id = id;
    }

    public RandomElementCollection(Long id, String name, int nSelection, int shouldAllowRepeat) {
        this.id = id;
        this.name = name;
        this.nSelection = nSelection;
        this.shouldAllowRepeat = shouldAllowRepeat;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRandomElementCollectionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getNSelection() {
        return nSelection;
    }

    public void setNSelection(int nSelection) {
        this.nSelection = nSelection;
    }

    public int getShouldAllowRepeat() {
        return shouldAllowRepeat;
    }

    public void setShouldAllowRepeat(int shouldAllowRepeat) {
        this.shouldAllowRepeat = shouldAllowRepeat;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<RandomElement> getListElements() {
        if (listElements == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RandomElementDao targetDao = daoSession.getRandomElementDao();
            listElements = targetDao._queryRandomElementCollection_ListElements(id);
        }
        return listElements;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetListElements() {
        listElements = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    
    public int getIndexOfElement (RandomElement randomElement) {
    	
    }
    
    //Return a randomize array
    public List <RandomElement> randomize () {
    	ArrayList <RandomElement> result = new ArrayList<RandomElement>();
    	for (int i = 0; i < nSelection; i++) {
    		while (true) {
    			Random rand = new Random ();
    			int index = rand.nextInt(listElements.size());
    			RandomElement randomElement = listElements.get(index);
    			if (!result.contains(randomElement) || shouldAllowRepeat == 0) {
    				result.add(randomElement);
    				break;
    			}
    		}
    	}
    	return result;
    }
    
    
    
    // KEEP METHODS END

}
